#pragma once 
#include <riscv_vector.h>

// #ifdef XORSHIFT
  // Seeds for parallel xorshift PRNG generated by CPU implemenation xorshift seeded with 2463534242
  static uint32_t xor_seeds[64] = {267649, 94672, 515873, 735917, 239196, 133811, 108832, 774178,
                        1018288, 630606, 875723, 21417, 860211, 978976, 862720, 826584,
                        766452, 166252, 543118, 440882, 531074, 377549, 910899, 290005,
                        154837, 326306, 53424, 1009004, 936355, 163091, 193940, 453127,
                        438273, 685690, 219449, 258951, 496815, 421771, 305582, 239695,
                        694749, 1042363, 903157, 156643, 288354, 864207, 323433, 934214,
                        1003440, 197563, 141854, 538067, 409975, 203808, 731693, 547833,
                        89826, 106918, 204732, 565405, 597870, 183272, 696876, 878130};
// #endif

// #ifdef XOROSHIRO
  // Seeds with 2^64 non-overlapping periods for xoshiro128+ seeded with Splitmix64 recommended by Blackman (s0=0x3AC54D35EB8CCCE2, s1=0x50E87ABFBD92334E)
  static uint64_t splitmix64_seed0[64] = {0x3ac54d35eb8ccce2,  0x6f7c506bd238b006,  0xb63582e3fb17aa2a,  0x76833fba7e961947,  0x83c20d06eed88c80,  0xc5a1bc1830b26ce3,  0x9da3ef8c86172303,  0x9e5cfdfe344ba201,
                                          0xc797a191bd021f47,  0x365b0522ad8a55b7,  0xbd36c577ff255cfe,  0xbb70169226781829,  0xcdf73aba1d7acad7,  0xddd1f35e3a4387b6,  0xf4f262939dce96dc,  0x2f5c3d143e511e7b,
                                          0xd8224bf15407d49f,  0x3136fcb577c416a0,  0xf0f4f8ce6bc31d3f,  0x9b4622190b44a83b,  0x490d756f49cd5305,  0x340b32ded0c19a9a,  0x21a77bba20d03a2b,  0xf64be486818506f2,
                                          0xea592d7825dfac07,  0x755e786e2646c85c,  0x24e9fb99d4877aa1,  0xa440c8c76fc5ed2,  0x89b106db1aa5c21,  0xc85d34235a57a358,  0x521328dcf3d4d2bd,  0xca10a9bb00b52399,
                                          0x935cc2cba9650d55,  0xd634c31590a76ac7,  0xae7d711fccc26b63,  0xe76fff69981927c,  0x54d08741044f1450,  0x3416999306553399,  0x5280a6b45c4dc257,  0x38fca3a617bbf7d3,
                                          0x9fca1db58af4ae20,  0x3c267ac812c326e5,  0xb9ef2e59114a1874,  0xe401481c4d633ed3,  0xbbf19a6f272c93ed,  0xc0472ad58598864,  0x8416844ee19039c4,  0x54bb2aa6ae0dedf6,
                                          0xfa4e7e451009ce6a,  0xc638887c550b263f,  0x857e287e2e62196f,  0xb0c9cc8bf4f010fc,  0x7731bacefbc43b5,  0x991767118fdc891a,  0x14c7b75694843618,  0xf2d3f79ffe71a593,
                                    0x118844f8925e7aef,  0xee54c69ab0cacc18,  0x4c7980f8769aa3b7,  0x91c98789e69b89ff,  0xa09d5b15b88a3f44,  0x8a9494282fc9a527,  0xc494f6eee3f2c5f,  0xf71ca0b0163a00e9};
  static uint64_t splitmix64_seed1[64] = {0x50e87abfbd92334e,  0xfebd818b4296854e,  0xd1045f8c2bef372b,  0x78b372c3b04588db,  0x8c0a045834f44edb,  0x950e9ecac1dcfc6b,  0xfbb7a9952238a99f,  0x86a59428368b7c5b,
                                          0xa86aafbc01accc27,  0x5796f797ed8f12ef,  0xb3fa7c852e5c7f7d,  0x4bdb84367443cf1c,  0xfa76c948b5f0ff3e,  0x8036cce603b7f528,  0x9a93ec51103b1174,  0x86941af2a2b67259,
                                          0x563b7a4dec454f71,  0x3f850c52175337e2,  0x3a0db5fc13348972,  0x7e33be196f1c71d2,  0x41a3b0082b1a2d2d,  0x7cbef4d16dd01522,  0x2837753fe7399079,  0xfd99a1e5a2aa81e1,
                                          0x5fa50fdb6788280a,  0xe9ab056aba47c48,  0xecbffc5e36739fe3,  0x273986d00a457df0,  0x86a67db05521d9f5,  0x714820ac97124b94,  0x51d9282d787c0c28,  0xa2066283ed28df75,
                                          0xe574d62fd7520b22,  0xcb1e94d98e658888,  0xea22d8f252312120,  0xee939e70d886bff6,  0x61965827de610a4d,  0x85f9279a0f049360,  0xa78c421e33113802,  0xb8a2525a75bde597,
                                          0x147bdbe44ce806f1,  0x4e79cf66160db35f,  0x8e43b437272f757,  0x442e6558fdadd145,  0x7ac22a772ff72109,  0x3552e455da1d6921,  0x66dacca2110ad2a0,  0x29e3dbb56517056b,
                                          0x260c3a2fc9c15590,  0x2969728b58fcfdfc,  0x90f1da6bf084d8aa,  0x77e013a17728f527,  0xe5c785dd82306847,  0x307c604c4667b886,  0x4144bcd80403e9b0,  0xc2e2befc77ba49fb,
                                          0x2a6dea435bd00f70,  0x760b93937746b0b0,  0x23d4563fd92278c5,  0x320ac8d4815f8d39,  0x3102c92c3f65884d,  0xeaed4c5d797fd512,  0x8c7ba9ba5a28718d,  0x36c969099bf8e933};
// #endif

// PRNGs
  vuint32m8_t galois(vuint32m8_t x);
  vuint32m8_t xorshift(vuint32m8_t x);
  vuint64m8_t xoroshiro128p(vuint64m8_t* s0, vuint64m8_t* s1, size_t vl);    

  // Conversion Functions
  vfloat32m8_t rand2float_32(vuint32m8_t rand_num);             
  vfloat32m4_t rand2float_64(vuint64m8_t rand_num, size_t vl);   

  // Function to hadamardize a vector of random numbers (see function to details)
  vfloat32m8_t hadamardrize_e32(vuint32m8_t rand_num, size_t vl);
  vfloat32m4_t hadamardrize_e64(vuint64m8_t rand_num, size_t vl);

  // Function to generate matrix from Xoroshiro generator (-1, 1)
  void genmatrix_xorshift(vuint32m8_t (*gen)(vuint32m8_t), vfloat32m8_t (*conv)(vuint32m8_t), float* rand_mat, uint32_t M, uint32_t N);

  // Function to generate matrix from Xoroshiro generator (-1, 1)
  void genmatrix_xoroshiro128(vfloat32m4_t (*gen)(vuint64m8_t, size_t), float* rand_mat, uint32_t M, uint32_t N);

